{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sistemas\\\\Desktop\\\\react\\\\Tutoriales\\\\criptomonedas\\\\src\\\\hooks\\\\useCriptomoneda.js\";\nimport React, { Fragment, useState } from 'react';\nimport styled from '@emotion/styled';\nconst Label = styled.label`\n    font-family: 'Bebas Neve', cursive;\n    color: #fff;\n    text-transform: uppercase;\n    font-weight: bold;\n    font-size: 1.5rem;\n    margin-top: 2rem;\n    display: block;\n    margin-bottom: 10px;\n`;\nconst Select = styled.select`\n    width: 100%;\n    display: block;\n    padding: 1rem;\n    -webkit-appearance: none;\n    border-radius: 10px;\n    border: none;\n`;\n\nconst useCriptomoneda = (label, stateInicial, opciones) => {\n  //State de este custom hook\n  const [state, actualizarState] = useState(stateInicial);\n\n  const SelectCripto = () => /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  }, label), /*#__PURE__*/React.createElement(Select, {\n    onChange: e => actualizarState(e.target.value),\n    value: state,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 17\n    }\n  }, \" -- Seleccione -- \"))); //retornar state, interfaz y funcion que modifica el state\n\n\n  return [state, SelectCripto, actualizarState];\n};\n\nexport default useCriptomoneda;","map":{"version":3,"sources":["C:/Users/sistemas/Desktop/react/Tutoriales/criptomonedas/src/hooks/useCriptomoneda.js"],"names":["React","Fragment","useState","styled","Label","label","Select","select","useCriptomoneda","stateInicial","opciones","state","actualizarState","SelectCripto","e","target","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,QAA1B,QAA0C,OAA1C;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAEA,MAAMC,KAAK,GAAGD,MAAM,CAACE,KAAM;;;;;;;;;CAA3B;AAWA,MAAMC,MAAM,GAAGH,MAAM,CAACI,MAAO;;;;;;;CAA7B;;AASA,MAAMC,eAAe,GAAG,CAACH,KAAD,EAAQI,YAAR,EAAsBC,QAAtB,KAAmC;AAEvD;AACA,QAAM,CAACC,KAAD,EAAQC,eAAR,IAA2BV,QAAQ,CAACO,YAAD,CAAzC;;AAEA,QAAMI,YAAY,GAAG,mBACjB,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQR,KAAR,CADJ,eAEI,oBAAC,MAAD;AAAQ,IAAA,QAAQ,EAAIS,CAAC,IAAIF,eAAe,CAACE,CAAC,CAACC,MAAF,CAASC,KAAV,CAAxC;AAA0D,IAAA,KAAK,EAAEL,KAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAQ,IAAA,KAAK,EAAC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,CAFJ,CADJ,CALuD,CAiBvD;;;AACA,SAAO,CAACA,KAAD,EAAQE,YAAR,EAAsBD,eAAtB,CAAP;AACH,CAnBD;;AAqBA,eAAeJ,eAAf","sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nconst Label = styled.label`\r\n    font-family: 'Bebas Neve', cursive;\r\n    color: #fff;\r\n    text-transform: uppercase;\r\n    font-weight: bold;\r\n    font-size: 1.5rem;\r\n    margin-top: 2rem;\r\n    display: block;\r\n    margin-bottom: 10px;\r\n`;\r\n\r\nconst Select = styled.select`\r\n    width: 100%;\r\n    display: block;\r\n    padding: 1rem;\r\n    -webkit-appearance: none;\r\n    border-radius: 10px;\r\n    border: none;\r\n`;\r\n\r\nconst useCriptomoneda = (label, stateInicial, opciones) => {\r\n\r\n    //State de este custom hook\r\n    const [state, actualizarState] = useState(stateInicial);\r\n\r\n    const SelectCripto = () => (\r\n        <Fragment>\r\n            <Label>{label}</Label>\r\n            <Select onChange = {e => actualizarState(e.target.value)} value={state}>\r\n                <option value=\"\"> -- Seleccione -- </option>\r\n                {/* {opciones.map(opcion => (\r\n                    <option key={opcion.codigo} value={opcion.codigo}> {opcion.nombre} </option>\r\n                ))} */}\r\n            </Select>\r\n        </Fragment>\r\n    );\r\n\r\n    //retornar state, interfaz y funcion que modifica el state\r\n    return [state, SelectCripto, actualizarState];\r\n};\r\n\r\nexport default useCriptomoneda;"]},"metadata":{},"sourceType":"module"}